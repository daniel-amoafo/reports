%{ warning = "This file was automatically generated and should not be edited." }%
// ${warning}

/// A monetary unit.
@DebugDescription
public struct Currency: Equatable, Hashable, Codable, Sendable {
    /// The three letter ISO 4217 currency code.
    public let code: String

    /// The name of the currency.
    public let name: String

    /**
        The number of decimal places used to express
        any minor units for the currency.

        For example, the US Dollar (USD)
        has a minor unit (cents)
        equal to 1/100 of a dollar,
        and therefore takes 2 decimal places.
        The Japanese Yen (JPY)
        doesn't have a minor unit,
        and therefore takes 0 decimal places.
    */
    public let minorUnit: Int

    public var debugDescription: String {
        "code: \(code), name: \(name), minorUnit: \(minorUnit)"
    }

    /// Returns the ISO 4217 currency associated with a given code.
    ///
    /// Currency codes are checked according to a strict, case-sensitive equality comparison.
    ///
    /// - Important: This method returns only currencies defined in the `Money` module.
    ///              For example,
    ///              if you define a custom `Currency` type,
    ///              calling this method with that currency type's `code` returns `nil`.
    ///
    /// - Parameter code: The ISO 4217 currency code
    /// - Returns: A `Currency` type, if one is found
    static public func iso4217Currency(for code: String) -> Currency? {
        switch code {
    %{
    import csv
    }%
    % with open('iso4217.csv') as file:
        % for row in csv.DictReader(file):
    %{
    code = row["Code"]
    }%
            % if code:
        case "${code}": return .${code}
        %end
    %end
%end
        default:
            return nil
        }
    }
}

public extension Currency {
    %{
    import csv
    }%
    % with open('iso4217.csv') as file:
        % for row in csv.DictReader(file):
    %{
    code = row["Code"]
    name = row["Name"]
    minorUnit = row["MinorUnit"]
    }%
            % if code and name and minorUnit:
    /// ${name} (${code})
    static let ${code} = Currency(code: "${code}", name: "${name}", minorUnit: ${minorUnit})
        %end
    %end
%end
}
